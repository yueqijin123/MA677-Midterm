knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(dplyr,ggplot2,gridExtra,markovchain,reshape2)
states <- c("A", "C", "G", "T")
mutationMatrix <- matrix(c(
0.9, 0.03, 0.05, 0.02,
0.04, 0.85, 0.05, 0.06,
0.01, 0.03, 0.94, 0.02,
0.02, 0.07, 0.01, 0.9
), byrow = TRUE, nrow = 4, dimnames = list(states, states))
fitnessValues <- c(A = 1.0, C = 1.2, G = 0.8, T = 1.1)
adjustForFitness <- function(matrix, fitness) {
adjustedMatrix <- matrix
for (i in 1:nrow(matrix)) {
for (j in 1:ncol(matrix)) {
adjustedMatrix[i, j] <- matrix[i, j] * fitness[names(fitness)[j]]
}
adjustedMatrix[i, ] <- adjustedMatrix[i, ] / sum(adjustedMatrix[i, ])
}
return(adjustedMatrix)
}
adjustedMatrix <- adjustForFitness(mutationMatrix, fitnessValues)
mcOriginal <- new("markovchain", states = states, byrow = TRUE, transitionMatrix = mutationMatrix, name = "Original")
mcAdjusted <- new("markovchain", states = states, byrow = TRUE, transitionMatrix = adjustedMatrix, name = "Adjusted")
heatmapOriginal <- melt(mutationMatrix)
names(heatmapOriginal) <- c("From", "To", "Probability")
ggplot(heatmapOriginal, aes(x = To, y = From, fill = Probability)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "yellow") +
ggtitle("Original Mutation Matrix") +
xlab("To State") + ylab("From State")
heatmapAdjusted <- melt(adjustedMatrix)
names(heatmapAdjusted) <- c("From", "To", "Probability")
ggplot(heatmapAdjusted, aes(x = To, y = From, fill = Probability)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "yellow") +
ggtitle("Adjusted Mutation Matrix") +
xlab("To State") + ylab("From State")
fitnessDF <- as.data.frame(t(fitnessValues))
fitnessDF <- data.frame(State = names(fitnessValues), Fitness = as.numeric(fitnessValues))
#colnames(fitnessDF) <- c("Fitness")
#fitnessDF$State <- rownames(fitnessDF)
ggplot(fitnessDF, aes(x = State, y = Fitness, fill = State)) +
geom_bar(stat = "identity") +
ggtitle("Fitness Values") +
xlab("State") + ylab("Fitness")
set.seed(123)
initialState <- "A"
evolvedSequence <- rmarkovchain(n = 20, object = mcAdjusted, t0 = initialState)
print(evolvedSequence)
states <- c("A", "C", "G", "T")
mutationMatrix <- matrix(c(
0.9, 0.03, 0.05, 0.02,
0.04, 0.85, 0.05, 0.06,
0.01, 0.03, 0.94, 0.02,
0.02, 0.07, 0.01, 0.9
), byrow = TRUE, nrow = 4, dimnames = list(states, states))
fitnessValues <- c(A = 1.0, C = 1.2, G = 0.8, T = 1.1)
adjustForFitness <- function(matrix, fitness) {
adjustedMatrix <- matrix
for (i in 1:nrow(matrix)) {
for (j in 1:ncol(matrix)) {
adjustedMatrix[i, j] <- matrix[i, j] * fitness[names(fitness)[j]]
}
adjustedMatrix[i, ] <- adjustedMatrix[i, ] / sum(adjustedMatrix[i, ])
}
return(adjustedMatrix)
}
adjustedMatrix <- adjustForFitness(mutationMatrix, fitnessValues)
mcOriginal <- new("markovchain", states = states, byrow = TRUE, transitionMatrix = mutationMatrix, name = "Original")
mcAdjusted <- new("markovchain", states = states, byrow = TRUE, transitionMatrix = adjustedMatrix, name = "Adjusted")
heatmapOriginal <- melt(mutationMatrix)
names(heatmapOriginal) <- c("From", "To", "Probability")
ggplot(heatmapOriginal, aes(x = To, y = From, fill = Probability)) +
geom_tile() +
scale_fill_gradient(low = "skyblue", high = "yellow") +
ggtitle("Original Mutation Matrix") +
xlab("To State") + ylab("From State")
heatmapAdjusted <- melt(adjustedMatrix)
names(heatmapAdjusted) <- c("From", "To", "Probability")
ggplot(heatmapAdjusted, aes(x = To, y = From, fill = Probability)) +
geom_tile() +
scale_fill_gradient(low = "skyblue", high = "yellow") +
ggtitle("Adjusted Mutation Matrix") +
xlab("To State") + ylab("From State")
fitnessDF <- as.data.frame(t(fitnessValues))
fitnessDF <- data.frame(State = names(fitnessValues), Fitness = as.numeric(fitnessValues))
#colnames(fitnessDF) <- c("Fitness")
#fitnessDF$State <- rownames(fitnessDF)
ggplot(fitnessDF, aes(x = State, y = Fitness, fill = State)) +
geom_bar(stat = "identity") +
ggtitle("Fitness Values") +
xlab("State") + ylab("Fitness")
set.seed(123)
initialState <- "A"
evolvedSequence <- rmarkovchain(n = 20, object = mcAdjusted, t0 = initialState)
print(evolvedSequence)
states <- c("A", "C", "G", "T")
mutationMatrix <- matrix(c(
0.9, 0.03, 0.05, 0.02,
0.04, 0.85, 0.05, 0.06,
0.01, 0.03, 0.94, 0.02,
0.02, 0.07, 0.01, 0.9
), byrow = TRUE, nrow = 4, dimnames = list(states, states))
fitnessValues <- c(A = 1.0, C = 1.2, G = 0.8, T = 1.1)
adjustForFitness <- function(matrix, fitness) {
adjustedMatrix <- matrix
for (i in 1:nrow(matrix)) {
for (j in 1:ncol(matrix)) {
adjustedMatrix[i, j] <- matrix[i, j] * fitness[names(fitness)[j]]
}
adjustedMatrix[i, ] <- adjustedMatrix[i, ] / sum(adjustedMatrix[i, ])
}
return(adjustedMatrix)
}
adjustedMatrix <- adjustForFitness(mutationMatrix, fitnessValues)
mcOriginal <- new("markovchain", states = states, byrow = TRUE, transitionMatrix = mutationMatrix, name = "Original")
mcAdjusted <- new("markovchain", states = states, byrow = TRUE, transitionMatrix = adjustedMatrix, name = "Adjusted")
heatmapOriginal <- melt(mutationMatrix)
names(heatmapOriginal) <- c("From", "To", "Probability")
ggplot(heatmapOriginal, aes(x = To, y = From, fill = Probability)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
ggtitle("Original Mutation Matrix") +
xlab("To State") + ylab("From State")
heatmapAdjusted <- melt(adjustedMatrix)
names(heatmapAdjusted) <- c("From", "To", "Probability")
ggplot(heatmapAdjusted, aes(x = To, y = From, fill = Probability)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
ggtitle("Adjusted Mutation Matrix") +
xlab("To State") + ylab("From State")
fitnessDF <- as.data.frame(t(fitnessValues))
fitnessDF <- data.frame(State = names(fitnessValues), Fitness = as.numeric(fitnessValues))
#colnames(fitnessDF) <- c("Fitness")
#fitnessDF$State <- rownames(fitnessDF)
ggplot(fitnessDF, aes(x = State, y = Fitness, fill = State)) +
geom_bar(stat = "identity") +
ggtitle("Fitness Values") +
xlab("State") + ylab("Fitness")
set.seed(123)
initialState <- "A"
evolvedSequence <- rmarkovchain(n = 20, object = mcAdjusted, t0 = initialState)
print(evolvedSequence)
mu = 0 # Mean of the normal distribution
sigma = 1 # Standard deviation of the normal distribution
# Simulate order statistics from normal distribution
sim_data <- replicate(m, {
sample <- rnorm(n, mean = mu, sd = sigma)
sorted_sample <- sort(sample)
c(minimum = sorted_sample[1],
quartile_1 = sorted_sample[round(n/4)],
median = median(sample),
quartile_3 = sorted_sample[round(3*n/4)],
maximum = sorted_sample[n])
})
# Simulation parameters
set.seed(123) # For reproducibility
n = 1000 # Sample size
m = 10000 # Number of simulations
# Simulate order statistics
sim_data <- replicate(m, {
sample <- runif(n, min = 0, max = 1)
sorted_sample <- sort(sample)
c(minimum = sorted_sample[1],
quartile_1 = sorted_sample[n/4],
median = median(sample),
quartile_3 = sorted_sample[3*n/4],
maximum = sorted_sample[n])
})
titles <- c("Minimum", "First Quartile", "Median", "Third Quartile", "Maximum")
# Plot results with blue bars and red lines for the mean
par(mfrow=c(3,2))
for (i in 1:5) {
hist(sim_data[i,], main= titles[i], xlab = "Value", col = "blue", border = "white", breaks = 50)
}
lambda = 1 # Rate parameter for the exponential distribution
# Simulate order statistics from exponential distribution
sim_data <- replicate(m, {
sample <- rexp(n, rate = lambda)
sorted_sample <- sort(sample)
c(minimum = sorted_sample[1],
quartile_1 = sorted_sample[n/4],
median = median(sample),
quartile_3 = sorted_sample[3*n/4],
maximum = sorted_sample[n])
})
titles <- c("Minimum", "First Quartile", "Median", "Third Quartile", "Maximum")
# Plot results with blue bars and red lines for the mean
par(mfrow=c(3,2))
for (i in 1:5) {
hist(sim_data[i,], main= titles[i], xlab = "Value", col = "blue", border = "white", breaks = 50)
}
mu = 0 # Mean of the normal distribution
sigma = 1 # Standard deviation of the normal distribution
# Simulate order statistics from normal distribution
sim_data <- replicate(m, {
sample <- rnorm(n, mean = mu, sd = sigma)
sorted_sample <- sort(sample)
c(minimum = sorted_sample[1],
quartile_1 = sorted_sample[round(n/4)],
median = median(sample),
quartile_3 = sorted_sample[round(3*n/4)],
maximum = sorted_sample[n])
})
# Define a function to plot histograms with adjusted ranges and add a mean line
plot_hist_with_mean <- function(data, main) {
range_x <- range(data, na.rm = TRUE)
# Ensure at least some spread in data to avoid division by zero in 'breaks'
spread <- max(1e-6, diff(range_x)/30)
hist(data, main = main, xlab = "Value", col = "blue", border = "white",
breaks = seq(from = range_x[1], to = range_x[2], by = spread),
xlim = range_x)
}
# Plot results with blue bars and red lines for the mean
par(mfrow=c(3,2))
titles <- c("Minimum", "First Quartile", "Median", "Third Quartile", "Maximum")
for (i in 1:5) {
plot_hist_with_mean(sim_data[i,], titles[i])
}
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
# Simulate samples from exponential distribution
set.seed(1)
n_samples <- 10000
samples <- matrix(rexp(n_samples * 5), ncol = 5)
# Calculate the second order statistic
sec_vals <- apply(samples, 1, function(x) sort(x)[2])
data_sec <- data.frame(value = sec_vals)
# Theoretical density
theoretical_density <- function(x) { 20 * exp(-4 * x) * (1 - exp(-x)) }
# Plot
ggplot(data_sec, aes(x = value)) +
geom_histogram(aes(y = after_stat(density)), binwidth = 0.03, fill = "#FFD60A", color = "black") +
stat_function(fun = theoretical_density, color = "#003566", linewidth = 1) +
labs(title = "Density of Second Order Statistic from Exponential Distribution",
x = "Value",
y = "Density") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
